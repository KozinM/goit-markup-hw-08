/* mixin for setting up paddings: top and bottom are mandatory and left, right are at request */
@mixin section-padds($m-t,$m-b,$m-l:false,$m-r:false){
padding-top:$m-t;
padding-bottom: $m-b;

@if $m-l{

padding-left: $m-l;}

@if $m-r {
padding-right: $m-r;}
}

/* mixin for setting up media querry for different screen sizes: mobily, tablet, desktop */
@mixin mq($type) {
    $mobile: 480px;
    $tablet: 768px;
    $desktop: 1600px;
  
    @if $type == 'mobile-only' {
      @media screen and (max-width: #{$tablet - 0.02}) {
        @content;
      }
    }
    @if $type == 'mobile' {
      @media screen and (min-width: $mobile) {
        @content;
      }
    }
    @if $type == 'tablet-only' {
      @media screen and (min-width: $tablet) and (max-width: #{$desktop - 0.02}) {
        @content;
      }
    }
    @if $type == 'tablet' {
      @media screen and (min-width: $tablet) {
        @content;
      }
    }
    @if $type == 'not-desktop' {
      @media screen and (max-width: #{$desktop - 0.02}) {
        @content;
      }
    }
    @if $type == 'desktop' {
      @media screen and (min-width: $desktop) {
        @content;
      }
    }
  }

  // Calculating line-height value to multiplier
@function setLineHeight($lh, $fs) {
    $lh-no-units: strip-unit($lh);
    $fs-no-units: strip-unit($fs);
  
    $lh-value: $lh-no-units / $fs-no-units;
  
    $line-height: decimal-round($lh-value, 2);
  
    @return $line-height;
  }
  
  // Delete unit from incoming value
  @function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
      @return $number / ($number * 0 + 1);
    }
  
    @return $number;
  }
  
  @function decimal-round($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
      @warn '#{ $number } is not a number.';
      @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
      @warn '#{ $digits } is not a number.';
      @return $number;
    } @else if not unitless($digits) {
      @warn '#{ $digits } has a unit.';
      @return $number;
    }
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
    @if $mode == round {
      @return round($number * $n) / $n;
    } @else if $mode == ceil {
      @return ceil($number * $n) / $n;
    } @else if $mode == floor {
      @return floor($number * $n) / $n;
    } @else {
      @warn '#{ $mode } is undefined keyword.';
      @return $number;
    }
  }
  
  @mixin transition($property) {
    $duration: 250ms;
    $timing-function: ease;
  
    transition-property: $property;
    transition-duration: $duration;
    transition-timing-function: $timing-function;
  }